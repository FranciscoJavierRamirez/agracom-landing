---
// Agracom Internacional S.A. - Regions Section
// Sección simplificada con mapa mundial y zonas de despacho

import type { Locale } from '../../types/global';

export interface Props {
  lang: Locale;
  showStats?: boolean;
  class?: string;
}

const {
  lang,
  showStats = true,
  class: className = ''
} = Astro.props;
---

<section 
  id={lang === 'es' ? 'regiones' : 'regions'}
  class={`section bg-gradient-to-br from-neutral-50 to-white ${className}`}
  aria-label={lang === 'es' ? 'Regiones y mercados' : 'Regions and markets'}
>
  <div class="container mx-auto px-4">
    
    <!-- Section Header -->
    <div class="text-center space-y-6 mb-16">
      <div class="space-y-4">
        <h2 class="text-h2 font-bold text-neutral-900">
          {lang === 'es' ? 'Presencia Global, Servicio Local' : 'Global Presence, Local Service'}
        </h2>
        <p class="text-xl text-neutral-700 max-w-3xl mx-auto leading-relaxed">
          {lang === 'es' 
            ? 'Conectamos la calidad chilena con mercados especializados alrededor del mundo, con ejecutivos dedicados que entienden cada región.'
            : 'We connect Chilean quality with specialized markets around the world, with dedicated executives who understand each region.'
          }
        </p>
      </div>

      {/* Global Stats */}
      {showStats && (
        <div class="flex flex-wrap justify-center items-center gap-8 pt-8">
          <div class="text-center">
            <div class="text-3xl font-bold text-primary">17</div>
            <div class="text-sm text-neutral-600 font-medium">
              {lang === 'es' ? 'Países' : 'Countries'}
            </div>
          </div>
          <div class="text-center">
            <div class="text-3xl font-bold text-secondary">40+</div>
            <div class="text-sm text-neutral-600 font-medium">
              {lang === 'es' ? 'Clientes Activos' : 'Active Clients'}
            </div>
          </div>
          <div class="text-center">
            <div class="text-3xl font-bold text-accent">20+</div>
            <div class="text-sm text-neutral-600 font-medium">
              {lang === 'es' ? 'Años de Experiencia' : 'Years of Experience'}
            </div>
          </div>
          <div class="text-center">
            <div class="text-3xl font-bold text-info">270+</div>
            <div class="text-sm text-neutral-600 font-medium">
              {lang === 'es' ? 'Embarques Exitosos' : 'Successful Shipments'}
            </div>
          </div>
        </div>
      )}
    </div>

    <!-- World Map with Shipping Zones -->
      <div class="mb-16">
      <div class="bg-gradient-to-br from-slate-50 to-blue-50 rounded-3xl p-8 lg:p-12 border border-blue-100 relative overflow-hidden">
        <!-- Background elements -->
        <div class="absolute top-0 right-0 w-40 h-40 bg-gradient-to-br from-blue-200/20 to-teal-200/20 rounded-full transform translate-x-16 -translate-y-16"></div>
        <div class="absolute bottom-0 left-0 w-32 h-32 bg-gradient-to-tr from-teal-200/15 to-blue-200/15 rounded-full transform -translate-x-8 translate-y-8"></div>

        <div class="relative z-10">
          <div class="text-center mb-12">
            <h3 class="text-3xl md:text-4xl font-bold text-slate-900 mb-4">
              {lang === 'es' ? 'Nuestras Zonas de Despacho' : 'Our Shipping Zones'}
                        </h3>
            <p class="text-lg text-slate-600 max-w-2xl mx-auto">
              {lang === 'es' 
                ? 'Conectamos Chile con tres mercados estratégicos alrededor del mundo'
                : 'Connecting Chile with three strategic markets around the world'
              }
                        </p>
                      </div>

          <!-- Interactive World Map with Leaflet.js -->
          <div class="relative max-w-6xl mx-auto">
            <div id="shipping-map" class="w-full h-96 md:h-[500px] rounded-2xl overflow-hidden shadow-lg border border-slate-200"></div>
                  </div>

          <!-- Shipping Zones Legend -->
          <div class="grid md:grid-cols-3 gap-6 mt-12">
            <!-- US East Coast -->
            <div class="bg-white rounded-2xl p-6 shadow-md border-l-4 border-blue-500">
              <div class="flex items-center space-x-3 mb-4">
                <div class="w-4 h-4 bg-blue-500 rounded-full"></div>
                <h4 class="text-lg font-bold text-slate-900">
                  {lang === 'es' ? 'Costa Este EE.UU.' : 'US East Coast'}
                    </h4>
                <span class="text-2xl">🇺🇸</span>
                          </div>
              <div class="space-y-2 text-sm text-slate-600">
                <p><strong>{lang === 'es' ? 'Tránsito:' : 'Transit:'}</strong> 10-14 {lang === 'es' ? 'días' : 'days'}</p>
                <p><strong>{lang === 'es' ? 'Puertos:' : 'Ports:'}</strong> {lang === 'es' ? 'Nueva York, Boston, Baltimore' : 'New York, Boston, Baltimore'}</p>
                <p><strong>{lang === 'es' ? 'Productos:' : 'Products:'}</strong> {lang === 'es' ? 'Lupinos Orgánicos, Cerezas Kosher' : 'Organic Lupins, Kosher Cherries'}</p>
              </div>
            </div>

            <!-- Mediterranean -->
            <div class="bg-white rounded-2xl p-6 shadow-md border-l-4 border-amber-500">
              <div class="flex items-center space-x-3 mb-4">
                <div class="w-4 h-4 bg-amber-500 rounded-full"></div>
                <h4 class="text-lg font-bold text-slate-900">
                  {lang === 'es' ? 'Mediterráneo' : 'Mediterranean'}
                </h4>
                <span class="text-2xl">🌊</span>
              </div>
              <div class="space-y-2 text-sm text-slate-600">
                <p><strong>{lang === 'es' ? 'Tránsito:' : 'Transit:'}</strong> 15-20 {lang === 'es' ? 'días' : 'days'}</p>
                <p><strong>{lang === 'es' ? 'Puertos:' : 'Ports:'}</strong> Valencia, {lang === 'es' ? 'Génova, El Pireo' : 'Genoa, Piraeus'}</p>
                <p><strong>{lang === 'es' ? 'Productos:' : 'Products:'}</strong> {lang === 'es' ? 'Lupinos Premium, Cerezas' : 'Premium Lupins, Cherries'}</p>
                </div>
              </div>

            <!-- Middle East -->
            <div class="bg-white rounded-2xl p-6 shadow-md border-l-4 border-purple-500">
              <div class="flex items-center space-x-3 mb-4">
                <div class="w-4 h-4 bg-purple-500 rounded-full"></div>
                <h4 class="text-lg font-bold text-slate-900">
                  {lang === 'es' ? 'Medio Oriente' : 'Middle East'}
                </h4>
                <span class="text-2xl">🕌</span>
              </div>
              <div class="space-y-2 text-sm text-slate-600">
                <p><strong>{lang === 'es' ? 'Tránsito:' : 'Transit:'}</strong> 18-25 {lang === 'es' ? 'días' : 'days'}</p>
                <p><strong>{lang === 'es' ? 'Puertos:' : 'Ports:'}</strong> Jebel Ali, Doha, Kuwait</p>
                <p><strong>{lang === 'es' ? 'Productos:' : 'Products:'}</strong> {lang === 'es' ? 'Productos Halal Certificados' : 'Halal Certified Products'}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

  </div>
</section>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />

<script>
  // Declare global types for Leaflet
  declare global {
    interface Window {
      L: any;
      gtag?: (...args: any[]) => void;
    }
  }

  // Import Leaflet
  // @ts-ignore - Dynamic CDN imports
  import('https://unpkg.com/leaflet@1.9.4/dist/leaflet.js').then(() => {
    initializeMap();
  });

  function initializeMap() {
    // Get language for localization
    const lang = document.documentElement.lang || 'es';
    
    // Ensure Leaflet is loaded
    if (!window.L) {
      console.error('Leaflet not loaded');
      return;
    }
    
    const L = window.L as any;
    
    // Initialize map centered on Pacific Ocean to show Chile and destinations
    const map = L.map('shipping-map', {
      center: [-10, -60], // Centered to show Chile and shipping routes
      zoom: 2,
      minZoom: 2,
      maxZoom: 6,
      scrollWheelZoom: true,
      doubleClickZoom: false,
      dragging: true,
      zoomControl: true,
      attributionControl: false
    });

    // Add custom tile layer with blue ocean theme
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
      attribution: '',
      subdomains: 'abcd',
      maxZoom: 6
    }).addTo(map);

    // Define locations
    const locations = {
      chile: {
        coords: [-33.4489, -70.6693],
        name: lang === 'es' ? 'Chile 🇨🇱' : 'Chile 🇨🇱',
        color: '#10b981'
      },
      usEast: {
        coords: [40.7128, -74.0060],
        name: lang === 'es' ? 'Costa Este EE.UU. 🇺🇸' : 'US East Coast 🇺🇸',
        color: '#3b82f6'
      },
      mediterranean: {
        coords: [41.3851, 2.1734],
        name: lang === 'es' ? 'Mediterráneo 🌊' : 'Mediterranean 🌊',
        color: '#f59e0b'
      },
      middleEast: {
        coords: [25.2048, 55.2708],
        name: lang === 'es' ? 'Medio Oriente 🕌' : 'Middle East 🕌',
        color: '#8b5cf6'
      }
    };

    // Create custom icons
    function createCustomIcon(color: string, isOrigin = false) {
      return L.divIcon({
        className: 'custom-marker',
        html: `
          <div style="
            width: ${isOrigin ? '20px' : '16px'}; 
            height: ${isOrigin ? '20px' : '16px'}; 
            background-color: ${color};
            border: 3px solid white;
            border-radius: 50%;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            ${isOrigin ? 'animation: pulse 2s infinite;' : ''}
          "></div>
        `,
        iconSize: [isOrigin ? 26 : 22, isOrigin ? 26 : 22],
        iconAnchor: [isOrigin ? 13 : 11, isOrigin ? 13 : 11]
      });
    }

    // Add markers
    const chileMarker = L.marker(locations.chile.coords, {
      icon: createCustomIcon(locations.chile.color, true)
    }).addTo(map);

    const usMarker = L.marker(locations.usEast.coords, {
      icon: createCustomIcon(locations.usEast.color)
    }).addTo(map);

    const medMarker = L.marker(locations.mediterranean.coords, {
      icon: createCustomIcon(locations.mediterranean.color)
    }).addTo(map);

    const meMarker = L.marker(locations.middleEast.coords, {
      icon: createCustomIcon(locations.middleEast.color)
    }).addTo(map);

    // Add tooltips
    chileMarker.bindTooltip(locations.chile.name, {
      permanent: false,
      direction: 'top',
      className: 'custom-tooltip chile-tooltip'
    });

    usMarker.bindTooltip(locations.usEast.name, {
      permanent: false,
      direction: 'top',
      className: 'custom-tooltip us-tooltip'
    });

    medMarker.bindTooltip(locations.mediterranean.name, {
      permanent: false,
      direction: 'top',
      className: 'custom-tooltip med-tooltip'
    });

    meMarker.bindTooltip(locations.middleEast.name, {
      permanent: false,
      direction: 'top',
      className: 'custom-tooltip me-tooltip'
    });

    // Create animated shipping routes with custom implementation
    setTimeout(() => {
      // Define shipping routes with intermediate points for realistic curves
      const routes = [
        {
          path: [
            locations.chile.coords,
            [-20, -80], // Pacific curve
            [0, -90],   // Panama Canal area
            [25, -80],  // Caribbean
            locations.usEast.coords
          ],
          color: locations.usEast.color,
          name: 'route-us',
          delay: 0
        },
        {
          path: [
            locations.chile.coords,
            [-30, -40], // Atlantic curve
            [-10, -20], // Brazilian coast
            [20, -10],  // African coast
            locations.mediterranean.coords
          ],
          color: locations.mediterranean.color,
          name: 'route-med',
          delay: 800
        },
        {
          path: [
            locations.chile.coords,
            [-30, -40], // Atlantic curve
            [-10, -20], // Brazilian coast
            [10, 10],   // West Africa
            [20, 35],   // Mediterranean
            locations.middleEast.coords
          ],
          color: locations.middleEast.color,
          name: 'route-me',
          delay: 1600
        }
      ];

      // Create animated routes
      routes.forEach((route) => {
        setTimeout(() => {
          // Create the base route line - automatically added to map
          L.polyline(route.path, {
            color: route.color,
            weight: 4,
            opacity: 0.3,
            smoothFactor: 1,
            className: `shipping-route ${route.name}`
          }).addTo(map);

          // Create the animated overlay
          const animatedLine = L.polyline(route.path, {
            color: route.color,
            weight: 6,
            opacity: 0.8,
            dashArray: '20, 15',
            className: `animated-route ${route.name}-animated`
          }).addTo(map);

          // Add pulsing effect to the route
          setTimeout(() => {
            const element = animatedLine.getElement();
            if (element) {
              element.style.animation = 'dashMove 3s linear infinite';
            }
          }, 100);

          // Add route label
          const midPoint = route.path[Math.floor(route.path.length / 2)];
          const routeNames = {
            'route-us': lang === 'es' ? 'Ruta EE.UU.' : 'US Route',
            'route-med': lang === 'es' ? 'Ruta Mediterráneo' : 'Mediterranean Route',
            'route-me': lang === 'es' ? 'Ruta Medio Oriente' : 'Middle East Route'
          };

          L.marker(midPoint, {
            icon: L.divIcon({
              className: 'route-label',
              html: `<div style="
                background: ${route.color}; 
                color: white; 
                padding: 4px 8px; 
                border-radius: 12px; 
                font-size: 11px; 
                font-weight: 600;
                white-space: nowrap;
                box-shadow: 0 2px 4px rgba(0,0,0,0.3);
                border: 2px solid white;
              ">${routeNames[route.name as keyof typeof routeNames]}</div>`,
              iconSize: [100, 20],
              iconAnchor: [50, 10]
            })
          }).addTo(map);

        }, route.delay);
      });

      // Add shipping animation - moving dots along routes
      setTimeout(() => {
        routes.forEach((route) => {
          createMovingMarker(route.path, route.color);
        });
      }, 2000);

    }, 1000);

    // Function to create moving markers along routes
    function createMovingMarker(path: any[], color: string) {
      let currentIndex = 0;
      const shipIcon = L.divIcon({
        className: 'ship-marker',
        html: `<div style="
          width: 12px; 
          height: 12px; 
          background: ${color}; 
          border: 2px solid white;
          border-radius: 50%; 
          box-shadow: 0 0 0 4px ${color}33;
          animation: pulse 2s infinite;
        "></div>`,
        iconSize: [16, 16],
        iconAnchor: [8, 8]
      });

      const movingMarker = L.marker(path[0], { icon: shipIcon }).addTo(map);

      function moveToNext() {
        currentIndex = (currentIndex + 1) % path.length;
        const nextPoint = path[currentIndex];
        
        // Animate marker movement
        movingMarker.setLatLng(nextPoint);
        
        // Continue animation
        setTimeout(moveToNext, 4000 + Math.random() * 2000); // Random interval for realism
      }

      // Start movement after initial delay
      setTimeout(moveToNext, Math.random() * 3000);
    }

    // Analytics tracking
    map.on('zoomend moveend', function() {
      if (typeof window.gtag !== 'undefined') {
        window.gtag('event', 'map_interaction', {
          event_category: 'Regions',
          event_label: 'map_explored'
        });
      }
    });

    // Intersection Observer for initial view tracking
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          if (typeof window.gtag !== 'undefined') {
            window.gtag('event', 'regions_section_view', {
              event_category: 'Regions',
              event_label: 'leaflet_map_viewed'
            });
          }
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.3 });

    const regionsSection = document.getElementById(document.documentElement.lang === 'es' ? 'regiones' : 'regions');
    if (regionsSection) {
      observer.observe(regionsSection);
    }
  }
</script>

<style>
  /* Leaflet Map Container */
  #shipping-map {
    background: linear-gradient(135deg, #e0f2fe 0%, #bae6fd 100%);
    position: relative;
  }

  /* Custom Marker Pulse Animation */
  @keyframes pulse {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.8;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Shipping Route Animations */
  @keyframes dashMove {
    0% {
      stroke-dashoffset: 0;
    }
    100% {
      stroke-dashoffset: -35;
    }
  }

  /* Animated shipping routes */
  .animated-route {
    stroke-dasharray: 20, 15;
    animation: dashMove 3s linear infinite;
  }

  /* Ship marker animation */
  .ship-marker {
    z-index: 1000;
  }

  /* Route labels */
  .route-label {
    z-index: 999;
    pointer-events: none;
  }

  /* Enhanced route visibility */
  .shipping-route {
    stroke-linecap: round;
    stroke-linejoin: round;
  }

  /* Custom Tooltips */
  .custom-tooltip {
    background: rgba(0, 0, 0, 0.8) !important;
    border: none !important;
    border-radius: 8px !important;
    color: white !important;
    font-weight: 600 !important;
    padding: 8px 12px !important;
    font-size: 14px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3) !important;
  }

  .custom-tooltip::before {
    border-top-color: rgba(0, 0, 0, 0.8) !important;
  }

  /* Leaflet Control Styling */
  .leaflet-control-zoom {
    border: none !important;
    border-radius: 12px !important;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
  }

  .leaflet-control-zoom a {
    background-color: white !important;
    border: none !important;
    color: #334155 !important;
    font-weight: bold !important;
    width: 40px !important;
    height: 40px !important;
    line-height: 40px !important;
    font-size: 18px !important;
  }

  .leaflet-control-zoom a:hover {
    background-color: #f8fafc !important;
    color: #0f172a !important;
  }

  .leaflet-control-zoom a:first-child {
    border-radius: 12px 12px 0 0 !important;
  }

  .leaflet-control-zoom a:last-child {
    border-radius: 0 0 12px 12px !important;
  }

  /* Enhanced shipping zones cards */
  .border-l-4 {
    border-left-width: 4px;
  }

  /* Floating animation for background elements */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px) translateX(0px);
    }
    33% {
      transform: translateY(-10px) translateX(5px);
    }
    66% {
      transform: translateY(5px) translateX(-5px);
    }
  }

  .transform.translate-x-16.-translate-y-16 {
    animation: float 8s ease-in-out infinite;
  }

  .transform.-translate-x-8.translate-y-8 {
    animation: float 8s ease-in-out infinite 4s;
  }

  /* Map responsiveness */
  @media (max-width: 768px) {
    #shipping-map {
      height: 300px !important;
    }
    
    .custom-tooltip {
      font-size: 12px !important;
      padding: 6px 10px !important;
    }
    
    .leaflet-control-zoom a {
      width: 35px !important;
      height: 35px !important;
      line-height: 35px !important;
      font-size: 16px !important;
    }
  }

  /* Mobile responsiveness improvements */
  @media (max-width: 640px) {
    .text-3xl.md\\:text-4xl {
      font-size: 2rem;
    }

    .grid.md\\:grid-cols-3 {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
  }

  /* Animation optimization for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    @keyframes pulse {
      0%, 100% {
        transform: scale(1);
        opacity: 1;
      }
    }
    
    @keyframes float {
      0%, 100% {
        transform: translateY(0px) translateX(0px);
      }
    }
    
    .leaflet-ant-path {
      animation: none !important;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .custom-tooltip {
      background: rgba(15, 23, 42, 0.9) !important;
      color: #f1f5f9 !important;
    }
    
    .leaflet-control-zoom a {
      background-color: #1e293b !important;
      color: #f1f5f9 !important;
    }
    
    .leaflet-control-zoom a:hover {
      background-color: #334155 !important;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .custom-tooltip {
      background: #000 !important;
      color: #fff !important;
      border: 2px solid #fff !important;
    }
    
    .leaflet-control-zoom a {
      border: 2px solid #000 !important;
    }
  }
</style>
